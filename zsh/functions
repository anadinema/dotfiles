# Functions for different stuff


#############################
	### Homebrew's stuff ###
#############################

# Export the apps installed on the system to the Brewfile
brewsv() {
	brewfile_path=$DOTFILES/apps/Brewfile

	if [ "$WORK_MACHINE_SETUP" -eq 1 ]; then
		brewfile_path=$DOTFILES/work/apps/Brewfile
	fi

	brew bundle dump --file="$brewfile_path" --force && brew bundle --file="$brewfile_path" --force cleanup
}

#############################
### Git helpers functions ###
#############################

# Go to root folder of the git repository
grt() {
  root="$(git rev-parse --show-toplevel 2>/dev/null)"
  if [ -n "$root" ]; then
    cd "$root" || exit;
  else
    echo "Not in a git repository"
  fi
}

# Git push with/without branch name, (use +branchName for force push)
gp() {
	if [ -z "$1" ]; then
		git push origin "$(git branch --show-current)"
	else
		git push origin "$1"
	fi
}

# Quick git commit, push, with/without git add (-n at $1) & message ($1 or $2)
gdo() {
	if [ -z "$1" ]; then
		git add . && git commit -m "quick fixes on code" && git push origin "$(git branch --show-current)"
	elif [ -n "$1" ] && [ "$1" == "-n" -o "$1" == "--no-add" ]; then
		if [ -z "$2" ]; then
		  git commit -m "quick fixes on code" && git push origin "$(git branch --show-current)"
		else
			git commit -m "$2" && git push origin "$(git branch --show-current)"
		fi
	else
		git add . && git commit -m "$1" && git push origin "$(git branch --show-current)"
	fi
}

#############################
### Archive and unarchive ###
#############################

# Pack a folder into a .tar.bz2 format
pack() {
  if [ -z "$1" ]; then
    printf "No directory supplied."
  elif ! [[ -d $1 ]]; then
    echo "Error: $1 is not a directory."
  else
    tar -cvjSf "$(date "+%F")-$1.tar.bz2" "$1"
  fi
}

# Unpack a .tar.bz2 or .tar.zip files to folder
unpack() {
  if [ -z "$1" ]; then
    echo "No directory supplied."
  else
    tar xjf "$1"
  fi
}

#############################
		### Common utils ###
#############################

# Convert the unix/linux epoch format timestamp to ISO date
epoch() {
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    date --date "@$1" +"+%Y-%m-%dT%H:%M:%SZ"
  else
    date -r "$1" '+%Y-%m-%dT%H:%M:%SZ'
  fi
}

# Open intellij, on path if provided otherwise without path
ij() {
  if [ -n "$1" ]; then
    open -a 'IntelliJ IDEA' "$1"
  else
    open -a 'IntelliJ IDEA'
  fi
}

# Open Webstorm, on path if provided otherwise without path
ws() {
  if [ -n "$1" ]; then
    open -a 'WebStorm' "$1"
  else
    open -a 'WebStorm'
  fi
}

# Open Datagrip, on path if provided otherwise with default db path
dg() {
  if [ -n "$1" ]; then
    open -a 'Datagrip' "$1"
  else
    open -a 'Datagrip' "$DEVFILES"/repository/database
  fi
}

##############################
### Dotfiles related stuff ###
##############################

# Take brew dump, raycast backup, update dotfiles, then push changes to github
dotup() {

	# Below three are functions
	authbkp
	brewsv
	__rback

	if [ -z "$1" ]; then
		cd "$DOTFILES" || exit
		git status
		git add . || true
		COMMIT_MESSAGE=$(git status -s | sed 's/ M/M/' | sed 's/??/A/' | sed 's/ D/D/')
		git commit -m "bot : changes in following dotfiles" -m "$COMMIT_MESSAGE" || true
		git push origin "$(git branch --show-current)" || true
		cd $HOME || exit
	fi
}

# Take backup of name of auth environment variables
authbkp() {
	if [ -f "$DOTFILES/auth-env" ]; then
		dest_file_name=$DOTFILES/backups/auth-env.config

		if [ "$WORK_MACHINE_SETUP" -eq 1 ]; then
			dest_file_name=$DOTFILES/backups/auth-env.work.config
		fi

		awk -F= '/^export / {print $1"="} !/^export|^# Ignore next line|^# export/ {print}' $DOTFILES/auth-env > $dest_file_name
	fi
}

# INTERNAL : Update the raycast backup file with the new generated ones
__rback() {
	if [ "$(find "$DOTFILES"/backups -type f -name "Raycast*.rayconfig" | head -1 | wc -l)" -eq 1 ]; then
		NEW_RAYCAST_BACKUP_FILE=$(find "$DOTFILES"/backups -type f -name "Raycast*.rayconfig" | head -1)
		echo "Replacing $NEW_RAYCAST_BACKUP_FILE to be the raycast backup"
		rm "$DOTFILES"/backups/settings.rayconfig.bkp || true
		mv "$DOTFILES"/backups/settings.rayconfig "$DOTFILES"/backups/settings.rayconfig.bkp
		mv "$NEW_RAYCAST_BACKUP_FILE" "$DOTFILES"/backups/settings.rayconfig
		rm "$DOTFILES"/backups/settings.rayconfig.bkp || true
		rm -f "$DOTFILES"/settings/raycast/Raycast* || true
	fi
}

# List all the available functions
func() {
	print -z $(grep -E '(^# |^\w+\(\))' "$DOTFILES"/zsh/functions | \
	awk '/^#/{comment=$0; next} /^[a-zA-Z_]+[a-zA-Z0-9_]*\(\)/ && !/^\_\_/{gsub(/\(\)/, "", $1); \
	print $1 " - " substr(comment, 3); comment=""}' | \
	fzf +s --tac | cut -d' ' -f1)
}

# Search in the history
hg() {
	print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -E 's/ *[0-9]*\*? *//' | sed -E 's/\\/\\\\/g')
}

drm() {
  local cid
  cid=$(docker ps -a | sed 1d | fzf -q "$1" | awk '{print $1}')

  [ -n "$cid" ] && docker rm "$cid"
}

# Generate the AWS config
aws_setup() {
	local aws_conf_path=$DOTFILES/core/.aws
	if [ "$WORK_MACHINE_SETUP" -eq 1 ]; then
		aws_conf_path=$DOTFILES/work/core/.aws
	fi
	envsubst < $aws_conf_path/config.template > $aws_conf_path/config
	echo "AWS config file generated at $aws_conf_path/config"
}

# Switch between different AWS roles and update the config file
awsr() {
  case "$1" in
    "admin"|"adm") export AWS_ACTIVE_ROLE=$(echo $AWS_ADMIN_ROLE) ;;
    "main"|"pu"|"primary"|"mgmt") export AWS_ACTIVE_ROLE=$(echo $AWS_PRIMARY_ROLE) ;;
    "read"|"ro") export AWS_ACTIVE_ROLE=$(echo $AWS_READ_ROLE) ;;
    "cost"|"explore") export AWS_ACTIVE_ROLE=$(echo $AWS_COST_ROLE) ;;
    *) echo "No roles matched. Switching to primary role"; export AWS_ACTIVE_ROLE=$(echo $AWS_PRIMARY_ROLE) ;;
  esac
  echo "Switched to AWS role: $AWS_ACTIVE_ROLE . Running 'aws_setup' to update the config file."
  aws_setup
}

# Export the AWS credentials from the sso login to credentials file
awsc() {
  local credentials_path=$DOTFILES/core/.aws/credentials
  if [ "$WORK_MACHINE_SETUP" -eq 1 ]; then
    credentials_path="$DOTFILES/work/core/.aws/credentials"
  fi

  local profile=$([ -n "$1" ] && echo "$1" || echo main)
  if [ $profile == "all" ]; then
    __awsca "$credentials_path"
    return
  fi

  local temp_creds=$(aws configure export-credentials --profile "$profile")
  echo "
[$profile]
aws_access_key_id=$(echo $temp_creds | jq -r .AccessKeyId)
aws_secret_access_key=$(echo $temp_creds | jq -r .SecretAccessKey)
aws_session_token=$(echo $temp_creds | jq -r .SessionToken)" > "$credentials_path"
}

# INTERNAL : Export the AWS credentials for all profiles
__awsca() {
  echo > "$1"

  # Loop over all profiles
  for profile in $(aws configure list-profiles); do
    temp_creds=$(aws configure export-credentials --profile "$profile")
    echo "
[$profile]
aws_access_key_id=$(echo $temp_creds | jq -r .AccessKeyId)
aws_secret_access_key=$(echo $temp_creds | jq -r .SecretAccessKey)
aws_session_token=$(echo $temp_creds | jq -r .SessionToken)" >> "$1"
  done

}
