# Functions for different stuff

#############################
### Git helpers functions ###
#############################

# Go to root folder of the git repository
groot() {
  root="$(git rev-parse --show-toplevel 2>/dev/null)"
  if [ -n "$root" ]; then
    cd "$root" || exit;
  else
    echo "Not in a git repository"
  fi
}

# Git push wit/without branch name, (use +branchName for force push)
gp() {
	if [ -z "$1" ]; then
		git push origin "$(git branch --show-current)"
	else
		git push origin "$1"
	fi
}

# Quick git commit, push, with/without git add (-n at $1) & message ($1 or $2)
gdo() {
	if [ -z "$1" ]; then
		git add . && git commit -m "quick fixes on code" && git push origin "$(git branch --show-current)"
	elif [ -n "$1" ] && [ "$1" == "-n" -o "$1" == "--no-add" ]; then
		if [ -z "$2" ]; then
		  git commit -m "quick fixes on code" && git push origin "$(git branch --show-current)"
		else
			git commit -m "$2" && git push origin "$(git branch --show-current)"
		fi
	else
		git add . && git commit -m "$1" && git push origin "$(git branch --show-current)"
	fi
}

#############################
	### Version managers ###
#############################

# Switch java versions, options: 21, 17, gvm - graalvm-21
jvm() {
  if [ "$1" == "21" ]; then
    export JAVA_HOME="/Library/Java/JavaVirtualMachines/temurin-21.jdk/Contents/Home"
  elif [ "$1" == "17" ]; then
    export JAVA_HOME="/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home"
  elif [ "$1" == "gvm" ]; then
    export JAVA_HOME="/Library/Java/JavaVirtualMachines/graalvm-jdk-21/Contents/Home"
    export GRAALVM_HOME="/Library/Java/JavaVirtualMachines/graalvm-jdk-21/Contents/Home"
  fi

  PATH="$JAVA_HOME/bin:$PATH"
  export PATH
  reload
  java --version
}

# Create symlink of maven setting file to maven conf directory
mvm() {
  rm -f "$M2_HOME"/conf/settings.xml && ln -s "$DOTFILES"/stow/.m2/settings.xml "$M2_HOME"/conf/settings.xml
}

#############################
### Archive and unarchive ###
#############################

# Pack a folder into a .tar.bz2 format
pack() {
  if [ -z "$1" ]; then
    printf "No directory supplied."
  elif ! [[ -d $1 ]]; then
    echo "Error: $1 is not a directory."
  else
    tar -cvjSf "$(date "+%F")-$1.tar.bz2" "$1"
  fi
}

# Unpack a .tar.bz2 or .tar.zip files to folder
unpack() {
  if [ -z "$1" ]; then
    echo "No directory supplied."
  else
    tar xjf "$1"
  fi
}

#############################
		### Common utils ###
#############################

# Convert the unix/linux epoch format timestamp to ISO date
epoch() {
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    date --date "@$1" +"+%Y-%m-%dT%H:%M:%SZ"
  else
    date -r "$1" '+%Y-%m-%dT%H:%M:%SZ'
  fi
}

# Open intellij, on path if provided otherwise without path
idea() {
  if [ -n "$1" ]; then
    open -a 'IntelliJ IDEA' "$1"
  else
    open -a 'IntelliJ IDEA'
  fi
}

##############################
### Dotfiles related stuff ###
##############################

# Take brew dump, raycast backup, update dotfiles, then push changes to github
dotup() {
	brewsv
	__rback
	if [ -z "$1" ]; then
		cd "$DOTFILES" || exit
		git status
		git add . || true
		COMMIT_MESSAGE=$(git status -s | sed 's/ M/M/' | sed 's/??/A/' | sed 's/ D/D/')
		git commit -m "bot : changes in following dotfiles" -m "$COMMIT_MESSAGE" || true
		git push origin master || true
		cd $HOME || exit
	fi
}

# INTERNAL : Update the raycast backup file with the new generated ones
__rback() {
	if [ "$(find "$DOTFILES"/settings/raycast -type f -exec ls -t1 {} + | head -1 | grep Raycast | wc -l)" -eq 1 ]; then
		NEW_RAYCAST_BACKUP_FILE=$(find "$DOTFILES"/settings/raycast -type f -exec ls -t1 {} + | head -1 | grep Raycast)
		echo "Replacing $NEW_RAYCAST_BACKUP_FILE to be the raycast backup"
		mv "$DOTFILES"/settings/raycast/settings.rayconfig "$DOTFILES"/settings/raycast/settings.rayconfig.bkp-"$(date "+%Y%m%d-%H:%M:%S")"
		mv "$NEW_RAYCAST_BACKUP_FILE" "$DOTFILES"/settings/raycast/settings.rayconfig
		rm -f "$DOTFILES"/settings/raycast/Raycast* || true
	fi
}

# List all the available functions
func() {
	print -z $(grep -E '(^# |^\w+\(\))' "$DOTFILES"/source/.zsh_functions | \
	awk '/^#/{comment=$0; next} /^[a-zA-Z_]+[a-zA-Z0-9_]*\(\)/ && !/^\_\_/{gsub(/\(\)/, "", $1); \
	print $1 " - " substr(comment, 3); comment=""}' | \
	fzf +s --tac | cut -d' ' -f1)
}

# Search in the history
hg() {
	print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -E 's/ *[0-9]*\*? *//' | sed -E 's/\\/\\\\/g')
}

drm() {
  local cid
  cid=$(docker ps -a | sed 1d | fzf -q "$1" | awk '{print $1}')

  [ -n "$cid" ] && docker rm "$cid"
}
